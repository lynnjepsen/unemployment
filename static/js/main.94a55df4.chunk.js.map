{"version":3,"sources":["form/navigator/incomplete-question-set.svg","form/navigator/connector.svg","session-progress/logo/logo.svg","form/navigator/complete-question-set.svg","session-progress/logo/index.js","session-progress/section-title/index.js","session-progress/index.js","form/text-field/index.js","form/personal-information/index.js","form/identification/drivers-license/index.js","form/identification/index.js","form/navigator/index.js","form/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logo","react_default","a","createElement","src","logo","className","alt","Component","SectionTitle","this","props","title","SessionProgress","src_session_progress_logo","session_progress_section_title","TextField","state","value","_this2","dist_default","outlined","label","helperText","dist","persistent","question","onChange","e","handleChange","setState","target","onUserInput","isUserInput","PersonalInformation","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isBirthdaySet","isGenderSet","isComplete","prevProps","prevState","onComplete","form_text_field","DriversLicense","Identification","identification_drivers_license","Navigator","renderPersonalInformationIndictor","connector","incompleteQuestionSet","isPersonalInformationComplete","completeQuestionSet","Form","form_personal_information","form_identification","src_form_navigator","App","src_session_progress","src_form_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94a55df4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/incomplete-question-set.db64fccd.svg\";","module.exports = __webpack_public_path__ + \"static/media/connector.8e7eb944.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.66e8af9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/complete-question-set.c5b57b22.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './index.scss';\n\nclass Logo extends Component {\n  render() {\n    return (\n      <img src={logo} className=\"logo\" alt=\"logo\" />\n    );\n  }\n}\n\nexport default Logo;\n","import React, {Component} from 'react';\nimport './index.scss';\n\nclass SectionTitle extends Component {\n  render() {\n    return (\n      <div className=\"section-title  mdc-typography--headline6\">\n        {this.props.title}\n      </div>\n    );\n  }\n}\n\nexport default SectionTitle;\n","import React, {Component} from 'react';\nimport Logo from './logo';\nimport SectionTitle from './section-title';\nimport './index.scss';\n\nclass SessionProgress extends Component {\n  render() {\n    return (\n      <div className=\"session-progress\">\n        <Logo className=\"session-progress__logo\"/>\n        <div className=\"session-progress__section-titles\">\n          <SectionTitle title=\"Introduction\" />\n          <SectionTitle title=\"Form\" />\n          <SectionTitle title=\"Print\" />\n          <SectionTitle title=\"Finish\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SessionProgress;\n","import React, {Component} from 'react';\nimport MaterialTextField, {HelperText, Input} from '@material/react-text-field';\nimport './index.scss';\n\nclass TextField extends Component {\n  state = {value: ''};\n\n  render() {\n    return (\n      <div className={this.props.className}>\n        <MaterialTextField\n          className=\"form-text-field\"\n          outlined\n          label={this.props.label}\n          helperText={<HelperText persistent>{this.props.question}</HelperText>}>\n          <Input\n            value={this.state.value}\n            onChange={(e) => this.handleChange(e)}/>\n        </MaterialTextField>\n      </div>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({value: e.target.value});\n    if (this.props.onUserInput) {\n      const isUserInput = e.target.value !== '';\n      this.props.onUserInput(isUserInput);\n    }\n  }\n}\n\nexport default TextField;\n","import React, {Component} from 'react';\nimport TextField from '../text-field';\nimport './index.scss';\n\nclass PersonalInformation extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isBirthdaySet: false,\n      isGenderSet: false,\n      isComplete: false\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const isComplete = this.state.isBirthdaySet && this.state.isGenderSet;\n    if (isComplete !== prevState.isComplete) {\n      this.setState({isComplete:isComplete});\n      if (this.props.onComplete) {\n        this.props.onComplete(isComplete);\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"personal-information\">\n        <TextField className=\"personal-information__birth-date\"\n          label=\"Birth Date (MM / DD / YYYY)\"\n          question=\"When were you born?\"\n          onUserInput={(isUserInput) => this.setState({isBirthdaySet: isUserInput})}/>\n        <TextField className=\"personal-information__gender\"\n          label=\"Gender\"\n          question=\"What is your gender?\"\n          onUserInput={(isUserInput) => this.setState({isGenderSet: isUserInput})}/>\n      </div>\n    );\n  }\n}\n\nexport default PersonalInformation;\n","import React, {Component} from 'react';\nimport TextField from '../../text-field';\nimport './index.scss';\n\nclass DriversLicense extends Component {\n\n  render() {\n    return (\n      <div className=\"drivers-license\">\n        <TextField className=\"drivers-license__number\"\n          label=\"License #\"\n          question=\"What is your drivers license?\"/>\n        <div className=\"drivers-license__name-form\">\n          <TextField className=\"drivers-license__first-name\"\n            label=\"First Name\"\n            question=\"What is your first name?\"/>\n          <TextField className=\"drivers-license__last-name\"\n            label=\"Last Name\"\n            question=\"What is your last name?\"/>\n        </div>\n        <TextField className=\"drivers-license__address\"\n          label=\"Address\"\n          question=\"What is your address?\"/>\n      </div>\n    );\n  }\n}\n\nexport default DriversLicense;\n","import React, {Component} from 'react';\nimport DriversLicense from './drivers-license';\nimport './index.scss';\n\nclass Identification extends Component {\n  render() {\n    return (\n      <div className=\"identification\">\n        <div className=\"identification__title\">Drivers License</div>\n        <DriversLicense/>\n      </div>\n    );\n  }\n}\n\nexport default Identification;\n","import React, {Component} from 'react';\nimport incompleteQuestionSet from './incomplete-question-set.svg';\nimport completeQuestionSet from './complete-question-set.svg';\nimport connector from './connector.svg';\nimport './index.scss';\n\nclass Navigator extends Component {\n\n  render() {\n    const className = \"navigator \"+this.props.className;\n    return (\n      <div className={className}>\n        <div className=\"navigator__question-set\">\n          {this.renderPersonalInformationIndictor()}\n          <span className=\"navigator__question-set-name\">Personal Information</span>\n        </div>\n        <img src={connector} className=\"navigator__connector\" alt=\"connector\" />\n        <div className=\"navigator__question-set\">\n          <img src={incompleteQuestionSet} className=\"navigator__question-set-indicator\" alt=\"question set indicator\" />\n          <span className=\"navigator__question-set-name\">Identification</span>\n        </div>\n        <img src={connector} className=\"navigator__connector\" alt=\"connector\" />\n        <div className=\"navigator__question-set\">\n          <img src={incompleteQuestionSet} className=\"navigator__question-set-indicator\" alt=\"question set indicator\" />\n          <span className=\"navigator__question-set-name\">Employers and Wages</span>\n        </div>\n        <img src={connector} className=\"navigator__connector\" alt=\"connector\" />\n        <div className=\"navigator__question-set\">\n          <img src={incompleteQuestionSet} className=\"navigator__question-set-indicator\" alt=\"question set indicator\" />\n          <span className=\"navigator__question-set-name\">Last Employer</span>\n        </div>\n      </div>\n    );\n  }\n\n  renderPersonalInformationIndictor() {\n    if (this.props.isPersonalInformationComplete) {\n      return (\n        <img src={completeQuestionSet} className=\"navigator__question-set-indicator\" alt=\"question set indicator\" />\n      );\n    }\n    return (\n      <img src={incompleteQuestionSet} className=\"navigator__question-set-indicator\" alt=\"question set indicator\" />\n    );\n  }\n}\n\nexport default Navigator;\n","import React, {Component} from 'react';\nimport PersonalInformation from './personal-information';\nimport IdentificatonQuestions from './identification';\nimport Navigator from './navigator';\nimport './index.scss';\n\nclass Form extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPersonalInformationComplete: false\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"form\">\n        <div className=\"form__questions\">\n          <PersonalInformation onComplete={(isComplete) => this.setState({isPersonalInformationComplete: isComplete})}/>\n          <IdentificatonQuestions/>\n        </div>\n        <Navigator className=\"form__navigator\" isPersonalInformationComplete={this.state.isPersonalInformationComplete}/>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React, {Component} from 'react';\nimport './typography/global-classnames.scss';\nimport SessionProgress from './session-progress';\nimport Form from './form';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <SessionProgress/>\n        <Form/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}