{"version":3,"sources":["session-progress/logo/logo.svg","session-progress/logo/index.js","session-progress/index.js","identification/document/index.js","identification/license-number-text-field/index.js","identification/first-name-text-field/index.js","identification/last-name-text-field/index.js","identification/address-text-field/index.js","identification/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logo","react_default","a","createElement","src","logo","className","alt","Component","SessionProgress","src_session_progress_logo","Document","LicenseNumberTextField","FirstNameTextField","LastNameTextField","AddressTextField","Identification","class","src_identification_document","identification_license_number_text_field","identification_first_name_text_field","identification_last_name_text_field","identification_address_text_field","App","src_session_progress","src_identification","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gYCYzBC,0LANX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAAMC,UAAU,OAAOC,IAAI,gBAHxBC,cCUJC,0LARX,OACER,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBACbL,EAAAC,EAAAC,cAACO,EAAD,cAJsBF,cCOfG,0LANX,OACEV,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBAHEE,cCQRI,0LANX,OACEX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,qCAHgBE,cCQtBK,0LANX,OACEZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iCAHYE,cCQlBM,0LANX,OACEb,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gCAHWE,cCQjBO,0LANX,OACEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,8BAHUE,cC4BhBQ,gMApBX,OACEf,EAAAC,EAAAC,cAAA,OAAKc,MAAM,kBACThB,EAAAC,EAAAC,cAAA,OAAKc,MAAM,mDAAX,kBACAhB,EAAAC,EAAAC,cAAA,OAAKc,MAAM,mDAAX,4DACAhB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAAA,OAAKc,MAAM,4DAAX,kBACAhB,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAAA,OAAKc,MAAM,6BACThB,EAAAC,EAAAC,cAACiB,EAAD,MACAnB,EAAAC,EAAAC,cAACkB,EAAD,OAEFpB,EAAAC,EAAAC,cAACmB,EAAD,cAhBqBd,cCOde,0LATX,OACEtB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,cALUjB,cCOEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e01430cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.66e8af9c.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './index.scss';\n\nclass Logo extends Component {\n  render() {\n    return (\n      <img src={logo} className=\"logo\" alt=\"logo\" />\n    );\n  }\n}\n\nexport default Logo;\n","import React, {Component} from 'react';\nimport Logo from './logo';\nimport './index.scss';\n\nclass SessionProgress extends Component {\n  render() {\n    return (\n      <div className=\"session-progress\">\n        <Logo/>\n      </div>\n    );\n  }\n}\n\nexport default SessionProgress;\n","import React, {Component} from 'react';\nimport './index.scss';\n\nclass Document extends Component {\n  render() {\n    return (\n      <div className=\"document\"></div>\n    );\n  }\n}\n\nexport default Document;\n","import React, {Component} from 'react';\nimport './index.scss';\n\nclass LicenseNumberTextField extends Component {\n  render() {\n    return (\n      <div className=\"license-number-text-field\"></div>\n    );\n  }\n}\n\nexport default LicenseNumberTextField;\n","import React, {Component} from 'react';\nimport './index.scss';\n\nclass FirstNameTextField extends Component {\n  render() {\n    return (\n      <div className=\"first-name-text-field\"></div>\n    );\n  }\n}\n\nexport default FirstNameTextField;\n","import React, {Component} from 'react';\nimport './index.scss';\n\nclass LastNameTextField extends Component {\n  render() {\n    return (\n      <div className=\"last-name-text-field\"></div>\n    );\n  }\n}\n\nexport default LastNameTextField;\n","import React, {Component} from 'react';\nimport './index.scss';\n\nclass AddressTextField extends Component {\n  render() {\n    return (\n      <div className=\"address-text-field\"></div>\n    );\n  }\n}\n\nexport default AddressTextField;\n","import React, {Component} from 'react';\nimport Document from './document';\nimport LicenseNumberTextField from './license-number-text-field';\nimport FirstNameTextField from './first-name-text-field';\nimport LastNameTextField from './last-name-text-field';\nimport AddressTextField from './address-text-field';\nimport '../typography.scss';\nimport './index.scss';\n\nclass Identification extends Component {\n  render() {\n    return (\n      <div class=\"identification\">\n        <div class=\"identification__title mdc-typography--headline6\">Identification</div>\n        <div class=\"identification__paragraph mdc-typography--body2\">What identification documents have you brought with you?</div>\n        <Document/>\n        <Document/>\n        <Document/>\n        <Document/>\n        <div class=\"identification__document-name  mdc-typography--headline6\">Divers License</div>\n        <LicenseNumberTextField/>\n        <div class=\"identification__name-form\">\n          <FirstNameTextField/>\n          <LastNameTextField/>\n        </div>\n        <AddressTextField/>\n      </div>\n    );\n  }\n}\n\nexport default Identification;\n","import React, {Component} from 'react';\nimport SessionProgress from './session-progress';\nimport Identification from './identification';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <SessionProgress/>\n        <Identification/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}